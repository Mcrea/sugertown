java中的io流：代表有能力产出数据的数据源对象或者有能力接收数据的接收端对象，io流屏蔽了实际的io设备中处理数据的细节。
java的io实现，因为使用的是装饰器模式，导致产生的大量的类，完全不知道具体场景使用哪些类。
InputStream表示从各种数据源产生输入的类。每种数据源都有相应的InputStream子类。
包括：字节数组、String对象，文件，管道？一个其他种类的流组成的序列，其他数据源等等
表18.1，page534
OutputStream表示输出要去往的目标：字节数组，文件或管道。
表18.2，page535
javaio使用装饰器，是因为装饰器可以实现多种不同功能的组合。但是缺点是大量的类和繁重的说明。
FilterInputStream和FilterOutputStream，装饰器类。他们不提供io的基本能力，但是会强化io的处理能力。
FilterInputStream见表18.3 p536
FilterOutputStream见表18.4 p537
装饰器类这里只写了2个，DataInputStream和BufferedInputStream,表示读取基本类型数据和是否缓存。
前面的18.1和18.2提供对不同数据源的读写能力，装饰器类强化了这种能力（是否缓存，有用的方法签名等等）。
InputStream和OutputStream提供了面向字节的形式，8位
Reader和Writer提供了兼容Unicode和面向字符的io功能，16位，主要是为了国际化。
两者之间有转换器InputStreamReader和OutputStreamWriter
几乎所有的原始javaio流都有相应的Reader和Writer来提供天然的Unicode操作。见表于p538