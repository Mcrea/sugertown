Lambda表达式：
    匿名， 类似于匿名类，没有名称。
    函数，lambda表达式所定义的执行体不属于任何类，所以叫做函数。
    可传递，lambda表达式可作为方法或函数的参数或返回值。
    简洁，在行为参数化方面，lambda表达式的写法比之前简化了很多。
lambda表达包含3个部分：参数列表，箭头，expression或者{statements;}
expression和statements的区别在于statements必须被包含在{}中，而且有些关键字必须放在statements中，比如return。
简单来说，引入lambda的实际意义就是简化通过匿名类实现行为参数化的代码。
函数式接口：一言以蔽之，就是只定义了一个抽象方法的接口。用以取代匿名类接口。接口数量有且只能是一，父接口的抽象方法也参与计数。
函数式接口的抽象方法签名，就叫做函数描述符。java需要函数描述符来区分不同类型的lambda，因为java还是会作类型检查的。

jdk8提供了function包下的一些函数式接口，供开发者使用。
Predicate:接受泛型T，并返回boolean，test方法
Consumer:接受泛型T，返回void,accept方法
Function<T, R>:接受泛型T，返回泛型R，apply方法
打开java.util.function包，会发现这个包下有许多jdk提供的函数式接口，以应对不同的扩展情况。甚至为了避免自动装箱和拆箱而创建了一些接口。
这些在开发的过程中打开这个包看就行。
lambda表达式允许你直接以内联的形式为函数式接口的抽象方法提供具体实现，并把表达式作为函数式接口的实例。
但是lambda表达式本身不携带类型信息，java怎么样去判断他的类型呢？从上下文中，并称之为目标类型。所以存在一个现象就是，函数式接口的类型，是以函数签名的
参数和返回值决定的，而不是函数式接口的接口或者方法的名称。所以同一个lambda表达式，可以匹配多个不同的函数式接口。
java编译器能够推断lambda的目标类型，也能够推断lambda中的参数类型，从而可以在表达式中省略参数类型。
如果lambda表达式中存在抛出的checked exception，必须在表达式内catch掉，或者在函数式接口中声明。

lambda能够获取外层作用域定义的变量，但是对局部变量有限制，不允许作修改。
方法引用：重复使用现有的方法定义，能够像lambda一样传递他们。根据已有的方法实现，来创建lambda表达式。
方法引用进一步简化了代码，但是在写这一类代码时，可以先写出lambda表达式，比较两者的方法签名。这样不是很抽象。
严肃认真，周到细致，稳妥可靠，万无一失


