这一章的主要内容是一些主要流操作的基础用法。
包括筛选、截断、映射、查找、匹配和归约等。
1.筛选：filter方法，接收一个谓词作为参数，返回包含符合谓词条件的元素的流。
    distinct方法会对流中的元素执行equals方法，确定没有重复的元素/hashcode
    limit(n)这个方法会截断当前流，只返回不超过n个元素的流。返回的元素取决于原始流是否有序,这里存疑。n大于元素个数，返回整个流。
    skip(n)这个方法会截断当前流，跳过前n个元素，明显和limit方法互补。如果同时使用，返回空流。n大于元素个数，也会返回空流.
2.映射：map方法，接收一个函数作为参数，这个函数会作用到每一个元素上，将其转化为一个新的元素。
    flatMap方法，与map不同的是，如果转化的结果是一个流的话，flatMap方法会将这些流合并成一个流。
3.查找和匹配：allMatch,anyMatch,noneMatch。注意这些都是终端操作，接收一个谓词作为参数。
    allMatch方法，查看流中的元素是否都满足谓词的条件。
    anyMatch方法，查看流中的元素是否至少一个满足谓词的条件。
    noneMatch方法，查看流中的元素是否全不满足谓词的条件。
    findFirst方法，返回流中的第一个元素，一般与filter方法配合使用。
    findAny方法，返回流中的任意一个元素，实测没有出现预想中的任意值，而是一直是同一个值。可能findAny的内部优化比较多。
4.归约，将流中的所有元素归约成一个值。
    reduce方法，依次对流中的元素作某种意义上的累计，从而计算出一个结果。
5.数值流，怎么开始关心起自动装箱拆箱的消耗了？
然后为了避免自动装箱拆箱的消耗，原始类型流特化来了。简单来说，避免泛型引入的包装类，那就为每一个基础数字类型开发一套
处理类吧。
IntStream
LongStream
DoubleStream
这3个流会避免自动装箱和拆箱的消耗，而且会为数值的归约提供尽可能多的功能，比如sum,max,min等等。
而且，这些流还有boxed方法，转为一般的stream。
对于需要返回某个元素的终端操作，stream的方法会返回一个Optional对象，同样，特化的流返回的Optional也是特化的。
OptionalInt
OptionalLong
OptionalDouble
最后，讲一下特化流包含的一个方法，range和rangeClosed。用来返回某个区间全部数值组成的特化流。没啥意思
6.构建流
Stream.of方法，接收一个数组，相当于将数组转化为流，生成空流用empty方法。Arrays.stream()方法也有这种效果。
由文件生成流，读文件更方便了。
最后讲了生成无限流的方式
Stream.iterate方法，接收一个初始值，还有一个依次作用在每个产生的新值上的lambda表达式。
Stream.generate方法,接收一个Supplier，生成的流以Supplier每次提供的返回值作为元素。

